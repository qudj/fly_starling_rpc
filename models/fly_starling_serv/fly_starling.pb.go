// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fly_starling.proto

package fly_starling_serv

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BaseRet struct {
	Code int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BaseRet) Reset()         { *m = BaseRet{} }
func (m *BaseRet) String() string { return proto.CompactTextString(m) }
func (*BaseRet) ProtoMessage()    {}
func (*BaseRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{0}
}
func (m *BaseRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseRet.Merge(m, src)
}
func (m *BaseRet) XXX_Size() int {
	return m.Size()
}
func (m *BaseRet) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseRet.DiscardUnknown(m)
}

var xxx_messageInfo_BaseRet proto.InternalMessageInfo

func (m *BaseRet) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BaseRet) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// swagger:model
type FetchProjectsRequest struct {
	Limit  int64             `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Filter map[string]string `protobuf:"bytes,3,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FetchProjectsRequest) Reset()         { *m = FetchProjectsRequest{} }
func (m *FetchProjectsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchProjectsRequest) ProtoMessage()    {}
func (*FetchProjectsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{1}
}
func (m *FetchProjectsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchProjectsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchProjectsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchProjectsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchProjectsRequest.Merge(m, src)
}
func (m *FetchProjectsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchProjectsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchProjectsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchProjectsRequest proto.InternalMessageInfo

func (m *FetchProjectsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FetchProjectsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchProjectsRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type FetchProjectsRet struct {
	Total int64      `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Project `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *FetchProjectsRet) Reset()         { *m = FetchProjectsRet{} }
func (m *FetchProjectsRet) String() string { return proto.CompactTextString(m) }
func (*FetchProjectsRet) ProtoMessage()    {}
func (*FetchProjectsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{2}
}
func (m *FetchProjectsRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchProjectsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchProjectsRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchProjectsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchProjectsRet.Merge(m, src)
}
func (m *FetchProjectsRet) XXX_Size() int {
	return m.Size()
}
func (m *FetchProjectsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchProjectsRet.DiscardUnknown(m)
}

var xxx_messageInfo_FetchProjectsRet proto.InternalMessageInfo

func (m *FetchProjectsRet) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *FetchProjectsRet) GetList() []*Project {
	if m != nil {
		return m.List
	}
	return nil
}

type Project struct {
	ProjectKey  string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	ProjectName string `protobuf:"bytes,2,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Status      int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{3}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *Project) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *Project) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Project) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// swagger:model
type FetchProjectsResponse struct {
	BaseRet *BaseRet          `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    *FetchProjectsRet `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchProjectsResponse) Reset()         { *m = FetchProjectsResponse{} }
func (m *FetchProjectsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchProjectsResponse) ProtoMessage()    {}
func (*FetchProjectsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{4}
}
func (m *FetchProjectsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchProjectsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchProjectsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchProjectsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchProjectsResponse.Merge(m, src)
}
func (m *FetchProjectsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchProjectsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchProjectsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchProjectsResponse proto.InternalMessageInfo

func (m *FetchProjectsResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchProjectsResponse) GetData() *FetchProjectsRet {
	if m != nil {
		return m.Data
	}
	return nil
}

// swagger:model
type FetchGroupsRequest struct {
	Limit      int64             `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ProjectKey string            `protobuf:"bytes,3,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	Filter     map[string]string `protobuf:"bytes,4,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FetchGroupsRequest) Reset()         { *m = FetchGroupsRequest{} }
func (m *FetchGroupsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchGroupsRequest) ProtoMessage()    {}
func (*FetchGroupsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{5}
}
func (m *FetchGroupsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchGroupsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchGroupsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchGroupsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchGroupsRequest.Merge(m, src)
}
func (m *FetchGroupsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchGroupsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchGroupsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchGroupsRequest proto.InternalMessageInfo

func (m *FetchGroupsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FetchGroupsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchGroupsRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchGroupsRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type FetchGroupsRet struct {
	Total int64    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*Group `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *FetchGroupsRet) Reset()         { *m = FetchGroupsRet{} }
func (m *FetchGroupsRet) String() string { return proto.CompactTextString(m) }
func (*FetchGroupsRet) ProtoMessage()    {}
func (*FetchGroupsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{6}
}
func (m *FetchGroupsRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchGroupsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchGroupsRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchGroupsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchGroupsRet.Merge(m, src)
}
func (m *FetchGroupsRet) XXX_Size() int {
	return m.Size()
}
func (m *FetchGroupsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchGroupsRet.DiscardUnknown(m)
}

var xxx_messageInfo_FetchGroupsRet proto.InternalMessageInfo

func (m *FetchGroupsRet) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *FetchGroupsRet) GetList() []*Group {
	if m != nil {
		return m.List
	}
	return nil
}

type Group struct {
	ProjectKey  string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey    string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	GroupName   string `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status      int64  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{7}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *Group) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *Group) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Group) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// swagger:model
type FetchGroupsResponse struct {
	BaseRet *BaseRet        `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    *FetchGroupsRet `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchGroupsResponse) Reset()         { *m = FetchGroupsResponse{} }
func (m *FetchGroupsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchGroupsResponse) ProtoMessage()    {}
func (*FetchGroupsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{8}
}
func (m *FetchGroupsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchGroupsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchGroupsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchGroupsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchGroupsResponse.Merge(m, src)
}
func (m *FetchGroupsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchGroupsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchGroupsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchGroupsResponse proto.InternalMessageInfo

func (m *FetchGroupsResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchGroupsResponse) GetData() *FetchGroupsRet {
	if m != nil {
		return m.Data
	}
	return nil
}

// swagger:model
type FetchOriginLgsRequest struct {
	Limit      int64             `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ProjectKey string            `protobuf:"bytes,3,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string            `protobuf:"bytes,4,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	Filter     map[string]string `protobuf:"bytes,5,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FetchOriginLgsRequest) Reset()         { *m = FetchOriginLgsRequest{} }
func (m *FetchOriginLgsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchOriginLgsRequest) ProtoMessage()    {}
func (*FetchOriginLgsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{9}
}
func (m *FetchOriginLgsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchOriginLgsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchOriginLgsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchOriginLgsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchOriginLgsRequest.Merge(m, src)
}
func (m *FetchOriginLgsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchOriginLgsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchOriginLgsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchOriginLgsRequest proto.InternalMessageInfo

func (m *FetchOriginLgsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FetchOriginLgsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchOriginLgsRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchOriginLgsRequest) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *FetchOriginLgsRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type FetchOriginLgsRet struct {
	Total int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*OriginLg `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *FetchOriginLgsRet) Reset()         { *m = FetchOriginLgsRet{} }
func (m *FetchOriginLgsRet) String() string { return proto.CompactTextString(m) }
func (*FetchOriginLgsRet) ProtoMessage()    {}
func (*FetchOriginLgsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{10}
}
func (m *FetchOriginLgsRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchOriginLgsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchOriginLgsRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchOriginLgsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchOriginLgsRet.Merge(m, src)
}
func (m *FetchOriginLgsRet) XXX_Size() int {
	return m.Size()
}
func (m *FetchOriginLgsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchOriginLgsRet.DiscardUnknown(m)
}

var xxx_messageInfo_FetchOriginLgsRet proto.InternalMessageInfo

func (m *FetchOriginLgsRet) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *FetchOriginLgsRet) GetList() []*OriginLg {
	if m != nil {
		return m.List
	}
	return nil
}

type OriginLg struct {
	ProjectKey string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	LangKey    string `protobuf:"bytes,3,opt,name=lang_key,json=langKey,proto3" json:"lang_key,omitempty"`
	Lang       string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	OriginText string `protobuf:"bytes,5,opt,name=origin_text,json=originText,proto3" json:"origin_text,omitempty"`
	Status     int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *OriginLg) Reset()         { *m = OriginLg{} }
func (m *OriginLg) String() string { return proto.CompactTextString(m) }
func (*OriginLg) ProtoMessage()    {}
func (*OriginLg) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{11}
}
func (m *OriginLg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OriginLg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OriginLg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OriginLg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OriginLg.Merge(m, src)
}
func (m *OriginLg) XXX_Size() int {
	return m.Size()
}
func (m *OriginLg) XXX_DiscardUnknown() {
	xxx_messageInfo_OriginLg.DiscardUnknown(m)
}

var xxx_messageInfo_OriginLg proto.InternalMessageInfo

func (m *OriginLg) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *OriginLg) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *OriginLg) GetLangKey() string {
	if m != nil {
		return m.LangKey
	}
	return ""
}

func (m *OriginLg) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *OriginLg) GetOriginText() string {
	if m != nil {
		return m.OriginText
	}
	return ""
}

func (m *OriginLg) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// swagger:model
type FetchOriginLgsResponse struct {
	BaseRet *BaseRet           `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    *FetchOriginLgsRet `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchOriginLgsResponse) Reset()         { *m = FetchOriginLgsResponse{} }
func (m *FetchOriginLgsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchOriginLgsResponse) ProtoMessage()    {}
func (*FetchOriginLgsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{12}
}
func (m *FetchOriginLgsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchOriginLgsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchOriginLgsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchOriginLgsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchOriginLgsResponse.Merge(m, src)
}
func (m *FetchOriginLgsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchOriginLgsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchOriginLgsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchOriginLgsResponse proto.InternalMessageInfo

func (m *FetchOriginLgsResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchOriginLgsResponse) GetData() *FetchOriginLgsRet {
	if m != nil {
		return m.Data
	}
	return nil
}

// swagger:model
type FetchTransLgsRequest struct {
	Limit      int64             `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     int64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	ProjectKey string            `protobuf:"bytes,3,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string            `protobuf:"bytes,4,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	LangKey    string            `protobuf:"bytes,5,opt,name=lang_key,json=langKey,proto3" json:"lang_key,omitempty"`
	Filter     map[string]string `protobuf:"bytes,6,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FetchTransLgsRequest) Reset()         { *m = FetchTransLgsRequest{} }
func (m *FetchTransLgsRequest) String() string { return proto.CompactTextString(m) }
func (*FetchTransLgsRequest) ProtoMessage()    {}
func (*FetchTransLgsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{13}
}
func (m *FetchTransLgsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchTransLgsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchTransLgsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchTransLgsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchTransLgsRequest.Merge(m, src)
}
func (m *FetchTransLgsRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchTransLgsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchTransLgsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchTransLgsRequest proto.InternalMessageInfo

func (m *FetchTransLgsRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *FetchTransLgsRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *FetchTransLgsRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchTransLgsRequest) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *FetchTransLgsRequest) GetLangKey() string {
	if m != nil {
		return m.LangKey
	}
	return ""
}

func (m *FetchTransLgsRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

type FetchTransLgsRet struct {
	Total int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	List  []*TransLgs `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (m *FetchTransLgsRet) Reset()         { *m = FetchTransLgsRet{} }
func (m *FetchTransLgsRet) String() string { return proto.CompactTextString(m) }
func (*FetchTransLgsRet) ProtoMessage()    {}
func (*FetchTransLgsRet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{14}
}
func (m *FetchTransLgsRet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchTransLgsRet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchTransLgsRet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchTransLgsRet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchTransLgsRet.Merge(m, src)
}
func (m *FetchTransLgsRet) XXX_Size() int {
	return m.Size()
}
func (m *FetchTransLgsRet) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchTransLgsRet.DiscardUnknown(m)
}

var xxx_messageInfo_FetchTransLgsRet proto.InternalMessageInfo

func (m *FetchTransLgsRet) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *FetchTransLgsRet) GetList() []*TransLgs {
	if m != nil {
		return m.List
	}
	return nil
}

type TransLgs struct {
	ProjectKey    string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey      string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	LangKey       string `protobuf:"bytes,3,opt,name=lang_key,json=langKey,proto3" json:"lang_key,omitempty"`
	Lang          string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	TranslateText string `protobuf:"bytes,5,opt,name=translate_text,json=translateText,proto3" json:"translate_text,omitempty"`
	Status        int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *TransLgs) Reset()         { *m = TransLgs{} }
func (m *TransLgs) String() string { return proto.CompactTextString(m) }
func (*TransLgs) ProtoMessage()    {}
func (*TransLgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{15}
}
func (m *TransLgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransLgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransLgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransLgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransLgs.Merge(m, src)
}
func (m *TransLgs) XXX_Size() int {
	return m.Size()
}
func (m *TransLgs) XXX_DiscardUnknown() {
	xxx_messageInfo_TransLgs.DiscardUnknown(m)
}

var xxx_messageInfo_TransLgs proto.InternalMessageInfo

func (m *TransLgs) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *TransLgs) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *TransLgs) GetLangKey() string {
	if m != nil {
		return m.LangKey
	}
	return ""
}

func (m *TransLgs) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *TransLgs) GetTranslateText() string {
	if m != nil {
		return m.TranslateText
	}
	return ""
}

func (m *TransLgs) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

// swagger:model
type FetchTransLgsResponse struct {
	BaseRet *BaseRet          `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    *FetchTransLgsRet `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchTransLgsResponse) Reset()         { *m = FetchTransLgsResponse{} }
func (m *FetchTransLgsResponse) String() string { return proto.CompactTextString(m) }
func (*FetchTransLgsResponse) ProtoMessage()    {}
func (*FetchTransLgsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{16}
}
func (m *FetchTransLgsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchTransLgsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchTransLgsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchTransLgsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchTransLgsResponse.Merge(m, src)
}
func (m *FetchTransLgsResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchTransLgsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchTransLgsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchTransLgsResponse proto.InternalMessageInfo

func (m *FetchTransLgsResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchTransLgsResponse) GetData() *FetchTransLgsRet {
	if m != nil {
		return m.Data
	}
	return nil
}

// swagger:model
type SaveProjectRequest struct {
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	OpId    string   `protobuf:"bytes,2,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
}

func (m *SaveProjectRequest) Reset()         { *m = SaveProjectRequest{} }
func (m *SaveProjectRequest) String() string { return proto.CompactTextString(m) }
func (*SaveProjectRequest) ProtoMessage()    {}
func (*SaveProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{17}
}
func (m *SaveProjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveProjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveProjectRequest.Merge(m, src)
}
func (m *SaveProjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveProjectRequest proto.InternalMessageInfo

func (m *SaveProjectRequest) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *SaveProjectRequest) GetOpId() string {
	if m != nil {
		return m.OpId
	}
	return ""
}

// swagger:model
type SaveProjectResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
}

func (m *SaveProjectResponse) Reset()         { *m = SaveProjectResponse{} }
func (m *SaveProjectResponse) String() string { return proto.CompactTextString(m) }
func (*SaveProjectResponse) ProtoMessage()    {}
func (*SaveProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{18}
}
func (m *SaveProjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveProjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveProjectResponse.Merge(m, src)
}
func (m *SaveProjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveProjectResponse proto.InternalMessageInfo

func (m *SaveProjectResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

// swagger:model
type SaveGroupRequest struct {
	Group *Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	OpId  string `protobuf:"bytes,2,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
}

func (m *SaveGroupRequest) Reset()         { *m = SaveGroupRequest{} }
func (m *SaveGroupRequest) String() string { return proto.CompactTextString(m) }
func (*SaveGroupRequest) ProtoMessage()    {}
func (*SaveGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{19}
}
func (m *SaveGroupRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveGroupRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveGroupRequest.Merge(m, src)
}
func (m *SaveGroupRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveGroupRequest proto.InternalMessageInfo

func (m *SaveGroupRequest) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *SaveGroupRequest) GetOpId() string {
	if m != nil {
		return m.OpId
	}
	return ""
}

// swagger:model
type SaveGroupResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
}

func (m *SaveGroupResponse) Reset()         { *m = SaveGroupResponse{} }
func (m *SaveGroupResponse) String() string { return proto.CompactTextString(m) }
func (*SaveGroupResponse) ProtoMessage()    {}
func (*SaveGroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{20}
}
func (m *SaveGroupResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveGroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveGroupResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveGroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveGroupResponse.Merge(m, src)
}
func (m *SaveGroupResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveGroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveGroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveGroupResponse proto.InternalMessageInfo

func (m *SaveGroupResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

// swagger:model
type SaveOriginLgRequest struct {
	OriginLang *OriginLg `protobuf:"bytes,1,opt,name=origin_lang,json=originLang,proto3" json:"origin_lang,omitempty"`
	OpId       string    `protobuf:"bytes,2,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
}

func (m *SaveOriginLgRequest) Reset()         { *m = SaveOriginLgRequest{} }
func (m *SaveOriginLgRequest) String() string { return proto.CompactTextString(m) }
func (*SaveOriginLgRequest) ProtoMessage()    {}
func (*SaveOriginLgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{21}
}
func (m *SaveOriginLgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveOriginLgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveOriginLgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveOriginLgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveOriginLgRequest.Merge(m, src)
}
func (m *SaveOriginLgRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveOriginLgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveOriginLgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveOriginLgRequest proto.InternalMessageInfo

func (m *SaveOriginLgRequest) GetOriginLang() *OriginLg {
	if m != nil {
		return m.OriginLang
	}
	return nil
}

func (m *SaveOriginLgRequest) GetOpId() string {
	if m != nil {
		return m.OpId
	}
	return ""
}

// swagger:model
type SaveOriginLgResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
}

func (m *SaveOriginLgResponse) Reset()         { *m = SaveOriginLgResponse{} }
func (m *SaveOriginLgResponse) String() string { return proto.CompactTextString(m) }
func (*SaveOriginLgResponse) ProtoMessage()    {}
func (*SaveOriginLgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{22}
}
func (m *SaveOriginLgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveOriginLgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveOriginLgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveOriginLgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveOriginLgResponse.Merge(m, src)
}
func (m *SaveOriginLgResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveOriginLgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveOriginLgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveOriginLgResponse proto.InternalMessageInfo

func (m *SaveOriginLgResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

// swagger:model
type SaveTransLgRequest struct {
	TransLang *TransLgs `protobuf:"bytes,1,opt,name=trans_lang,json=transLang,proto3" json:"trans_lang,omitempty"`
	OpId      string    `protobuf:"bytes,2,opt,name=op_id,json=opId,proto3" json:"op_id,omitempty"`
}

func (m *SaveTransLgRequest) Reset()         { *m = SaveTransLgRequest{} }
func (m *SaveTransLgRequest) String() string { return proto.CompactTextString(m) }
func (*SaveTransLgRequest) ProtoMessage()    {}
func (*SaveTransLgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{23}
}
func (m *SaveTransLgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveTransLgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveTransLgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveTransLgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveTransLgRequest.Merge(m, src)
}
func (m *SaveTransLgRequest) XXX_Size() int {
	return m.Size()
}
func (m *SaveTransLgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveTransLgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SaveTransLgRequest proto.InternalMessageInfo

func (m *SaveTransLgRequest) GetTransLang() *TransLgs {
	if m != nil {
		return m.TransLang
	}
	return nil
}

func (m *SaveTransLgRequest) GetOpId() string {
	if m != nil {
		return m.OpId
	}
	return ""
}

// swagger:model
type SaveTransLgResponse struct {
	BaseRet *BaseRet `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
}

func (m *SaveTransLgResponse) Reset()         { *m = SaveTransLgResponse{} }
func (m *SaveTransLgResponse) String() string { return proto.CompactTextString(m) }
func (*SaveTransLgResponse) ProtoMessage()    {}
func (*SaveTransLgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{24}
}
func (m *SaveTransLgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveTransLgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveTransLgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveTransLgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveTransLgResponse.Merge(m, src)
}
func (m *SaveTransLgResponse) XXX_Size() int {
	return m.Size()
}
func (m *SaveTransLgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveTransLgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SaveTransLgResponse proto.InternalMessageInfo

func (m *SaveTransLgResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

// swagger:model
type FetchTransLgRequest struct {
	ProjectKey string `protobuf:"bytes,1,opt,name=project_key,json=projectKey,proto3" json:"project_key,omitempty"`
	GroupKey   string `protobuf:"bytes,2,opt,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"`
	LangKey    string `protobuf:"bytes,3,opt,name=lang_key,json=langKey,proto3" json:"lang_key,omitempty"`
	Lang       string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (m *FetchTransLgRequest) Reset()         { *m = FetchTransLgRequest{} }
func (m *FetchTransLgRequest) String() string { return proto.CompactTextString(m) }
func (*FetchTransLgRequest) ProtoMessage()    {}
func (*FetchTransLgRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{25}
}
func (m *FetchTransLgRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchTransLgRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchTransLgRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchTransLgRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchTransLgRequest.Merge(m, src)
}
func (m *FetchTransLgRequest) XXX_Size() int {
	return m.Size()
}
func (m *FetchTransLgRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchTransLgRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchTransLgRequest proto.InternalMessageInfo

func (m *FetchTransLgRequest) GetProjectKey() string {
	if m != nil {
		return m.ProjectKey
	}
	return ""
}

func (m *FetchTransLgRequest) GetGroupKey() string {
	if m != nil {
		return m.GroupKey
	}
	return ""
}

func (m *FetchTransLgRequest) GetLangKey() string {
	if m != nil {
		return m.LangKey
	}
	return ""
}

func (m *FetchTransLgRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

// swagger:model
type FetchTransLgResponse struct {
	BaseRet *BaseRet  `protobuf:"bytes,1,opt,name=base_ret,json=baseRet,proto3" json:"base_ret,omitempty"`
	Data    *TransLgs `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *FetchTransLgResponse) Reset()         { *m = FetchTransLgResponse{} }
func (m *FetchTransLgResponse) String() string { return proto.CompactTextString(m) }
func (*FetchTransLgResponse) ProtoMessage()    {}
func (*FetchTransLgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b58ccd45641bb58, []int{26}
}
func (m *FetchTransLgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FetchTransLgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FetchTransLgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FetchTransLgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchTransLgResponse.Merge(m, src)
}
func (m *FetchTransLgResponse) XXX_Size() int {
	return m.Size()
}
func (m *FetchTransLgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchTransLgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchTransLgResponse proto.InternalMessageInfo

func (m *FetchTransLgResponse) GetBaseRet() *BaseRet {
	if m != nil {
		return m.BaseRet
	}
	return nil
}

func (m *FetchTransLgResponse) GetData() *TransLgs {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*BaseRet)(nil), "fly.starling.serv.BaseRet")
	proto.RegisterType((*FetchProjectsRequest)(nil), "fly.starling.serv.FetchProjectsRequest")
	proto.RegisterMapType((map[string]string)(nil), "fly.starling.serv.FetchProjectsRequest.FilterEntry")
	proto.RegisterType((*FetchProjectsRet)(nil), "fly.starling.serv.FetchProjectsRet")
	proto.RegisterType((*Project)(nil), "fly.starling.serv.Project")
	proto.RegisterType((*FetchProjectsResponse)(nil), "fly.starling.serv.FetchProjectsResponse")
	proto.RegisterType((*FetchGroupsRequest)(nil), "fly.starling.serv.FetchGroupsRequest")
	proto.RegisterMapType((map[string]string)(nil), "fly.starling.serv.FetchGroupsRequest.FilterEntry")
	proto.RegisterType((*FetchGroupsRet)(nil), "fly.starling.serv.FetchGroupsRet")
	proto.RegisterType((*Group)(nil), "fly.starling.serv.Group")
	proto.RegisterType((*FetchGroupsResponse)(nil), "fly.starling.serv.FetchGroupsResponse")
	proto.RegisterType((*FetchOriginLgsRequest)(nil), "fly.starling.serv.FetchOriginLgsRequest")
	proto.RegisterMapType((map[string]string)(nil), "fly.starling.serv.FetchOriginLgsRequest.FilterEntry")
	proto.RegisterType((*FetchOriginLgsRet)(nil), "fly.starling.serv.FetchOriginLgsRet")
	proto.RegisterType((*OriginLg)(nil), "fly.starling.serv.OriginLg")
	proto.RegisterType((*FetchOriginLgsResponse)(nil), "fly.starling.serv.FetchOriginLgsResponse")
	proto.RegisterType((*FetchTransLgsRequest)(nil), "fly.starling.serv.FetchTransLgsRequest")
	proto.RegisterMapType((map[string]string)(nil), "fly.starling.serv.FetchTransLgsRequest.FilterEntry")
	proto.RegisterType((*FetchTransLgsRet)(nil), "fly.starling.serv.FetchTransLgsRet")
	proto.RegisterType((*TransLgs)(nil), "fly.starling.serv.TransLgs")
	proto.RegisterType((*FetchTransLgsResponse)(nil), "fly.starling.serv.FetchTransLgsResponse")
	proto.RegisterType((*SaveProjectRequest)(nil), "fly.starling.serv.SaveProjectRequest")
	proto.RegisterType((*SaveProjectResponse)(nil), "fly.starling.serv.SaveProjectResponse")
	proto.RegisterType((*SaveGroupRequest)(nil), "fly.starling.serv.SaveGroupRequest")
	proto.RegisterType((*SaveGroupResponse)(nil), "fly.starling.serv.SaveGroupResponse")
	proto.RegisterType((*SaveOriginLgRequest)(nil), "fly.starling.serv.SaveOriginLgRequest")
	proto.RegisterType((*SaveOriginLgResponse)(nil), "fly.starling.serv.SaveOriginLgResponse")
	proto.RegisterType((*SaveTransLgRequest)(nil), "fly.starling.serv.SaveTransLgRequest")
	proto.RegisterType((*SaveTransLgResponse)(nil), "fly.starling.serv.SaveTransLgResponse")
	proto.RegisterType((*FetchTransLgRequest)(nil), "fly.starling.serv.FetchTransLgRequest")
	proto.RegisterType((*FetchTransLgResponse)(nil), "fly.starling.serv.FetchTransLgResponse")
}

func init() { proto.RegisterFile("fly_starling.proto", fileDescriptor_4b58ccd45641bb58) }

var fileDescriptor_4b58ccd45641bb58 = []byte{
	// 1047 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xc6, 0xeb, 0xaf, 0xe7, 0xb6, 0x24, 0x93, 0x50, 0x19, 0x57, 0x98, 0x74, 0xfb, 0x11,
	0x23, 0x21, 0x47, 0xa4, 0xad, 0x28, 0x15, 0xa7, 0x4a, 0x14, 0x95, 0x86, 0x0f, 0x6d, 0x22, 0x51,
	0x38, 0x60, 0x6d, 0xec, 0xb1, 0xbb, 0xb0, 0xde, 0x35, 0xbb, 0x63, 0xab, 0xbe, 0x70, 0x00, 0x09,
	0x84, 0xc4, 0x81, 0xbf, 0x80, 0x1b, 0x77, 0x4e, 0xfc, 0x0d, 0x1c, 0x38, 0xf4, 0xc8, 0x11, 0x25,
	0x27, 0xfe, 0x0b, 0x34, 0x1f, 0x3b, 0xde, 0xd9, 0xec, 0x87, 0x95, 0x0d, 0xe9, 0x6d, 0x66, 0xf6,
	0xcd, 0x7b, 0xbf, 0xf7, 0x9b, 0xdf, 0xbc, 0x37, 0x36, 0xa0, 0x91, 0xb3, 0xe8, 0x07, 0xc4, 0xf2,
	0x1d, 0xdb, 0x1d, 0xf7, 0xa6, 0xbe, 0x47, 0x3c, 0xb4, 0x31, 0x72, 0x16, 0x3d, 0xb9, 0x16, 0x60,
	0x7f, 0x6e, 0xec, 0x42, 0xed, 0xa1, 0x15, 0x60, 0x13, 0x13, 0x84, 0x40, 0x1f, 0x78, 0x43, 0xdc,
	0xd2, 0xb6, 0xb5, 0x6e, 0xd9, 0x64, 0x63, 0xb4, 0x0e, 0xe5, 0x49, 0x30, 0x6e, 0xad, 0x6d, 0x6b,
	0xdd, 0x86, 0x49, 0x87, 0xc6, 0x5f, 0x1a, 0x6c, 0x3d, 0xc2, 0x64, 0xf0, 0xec, 0x53, 0xdf, 0xfb,
	0x0a, 0x0f, 0x48, 0x60, 0xe2, 0x6f, 0x66, 0x38, 0x20, 0x68, 0x0b, 0x2a, 0x8e, 0x3d, 0xb1, 0x89,
	0xd8, 0xcf, 0x27, 0xe8, 0x2a, 0x54, 0xbd, 0xd1, 0x28, 0xc0, 0x84, 0xf9, 0x28, 0x9b, 0x62, 0x86,
	0x9e, 0x40, 0x75, 0x64, 0x3b, 0x04, 0xfb, 0xad, 0xf2, 0x76, 0xb9, 0xdb, 0xdc, 0xbb, 0xd3, 0x3b,
	0x85, 0xad, 0x97, 0x14, 0xa6, 0xf7, 0x88, 0xed, 0x7a, 0xdf, 0x25, 0xfe, 0xc2, 0x14, 0x2e, 0xda,
	0xef, 0x42, 0x33, 0xb2, 0x4c, 0x41, 0x7f, 0x8d, 0x17, 0x0c, 0x47, 0xc3, 0xa4, 0x43, 0x8a, 0x6d,
	0x6e, 0x39, 0x33, 0x2c, 0x12, 0xe1, 0x93, 0x07, 0x6b, 0xf7, 0x35, 0xe3, 0x29, 0xac, 0xc7, 0xc2,
	0xb0, 0x4c, 0x88, 0x47, 0x2c, 0x27, 0xcc, 0x84, 0x4d, 0x50, 0x0f, 0x74, 0xc7, 0x0e, 0x68, 0x1e,
	0x14, 0x6f, 0x3b, 0x01, 0xaf, 0xf0, 0x61, 0x32, 0x3b, 0xe3, 0x47, 0x0d, 0x6a, 0x62, 0x05, 0xbd,
	0x01, 0xcd, 0x29, 0x1f, 0xf6, 0x97, 0xc8, 0x40, 0x2c, 0x3d, 0xc1, 0x0b, 0x74, 0x1d, 0x2e, 0x85,
	0x06, 0xae, 0x35, 0x09, 0x71, 0x86, 0x9b, 0x3e, 0xb6, 0x26, 0x18, 0x6d, 0x43, 0x73, 0x88, 0x83,
	0x81, 0x6f, 0x4f, 0x89, 0xed, 0xb9, 0xad, 0x32, 0xb7, 0x88, 0x2c, 0x51, 0xae, 0x03, 0x62, 0x91,
	0x59, 0xd0, 0xd2, 0x39, 0xd7, 0x7c, 0x46, 0x91, 0xbc, 0x1a, 0x4b, 0x32, 0x98, 0x7a, 0x6e, 0x80,
	0xd1, 0x3d, 0xa8, 0x1f, 0x59, 0x01, 0xee, 0xfb, 0x98, 0x1f, 0x5b, 0x72, 0x5e, 0x42, 0x20, 0x66,
	0xed, 0x48, 0x28, 0xe5, 0x1d, 0xd0, 0x87, 0x16, 0xb1, 0x18, 0xca, 0xe6, 0xde, 0x8d, 0xfc, 0xa3,
	0x23, 0x26, 0xdb, 0x60, 0xfc, 0xab, 0x01, 0x62, 0x9f, 0x3e, 0xf0, 0xbd, 0xd9, 0xf4, 0x8c, 0xd2,
	0x89, 0x91, 0x59, 0x3e, 0x45, 0xe6, 0x63, 0xa9, 0x2d, 0x9d, 0x9d, 0xd5, 0xdb, 0x69, 0x00, 0x15,
	0x14, 0xe7, 0xad, 0xac, 0x43, 0xb8, 0xa2, 0x04, 0x49, 0xd3, 0xd5, 0x5b, 0x8a, 0xae, 0x5a, 0x09,
	0x58, 0x99, 0x07, 0xa1, 0xaa, 0x5f, 0x35, 0xa8, 0xb0, 0x79, 0xbe, 0xa6, 0xae, 0x41, 0x63, 0x4c,
	0x2d, 0xd9, 0x67, 0x0e, 0xaf, 0xce, 0x16, 0xe8, 0xc7, 0xd7, 0x01, 0xf8, 0x47, 0x26, 0x37, 0xce,
	0x21, 0x37, 0x4f, 0x12, 0x9b, 0x9e, 0x25, 0xb6, 0x8a, 0x22, 0xb6, 0xef, 0x35, 0xd8, 0x54, 0xf2,
	0x2e, 0x26, 0xb5, 0x7b, 0x8a, 0xd4, 0xae, 0xe7, 0x9d, 0x64, 0x28, 0xb4, 0x9f, 0xd7, 0x84, 0xe4,
	0x3f, 0xf1, 0xed, 0xb1, 0xed, 0xee, 0x8f, 0xff, 0x2f, 0xad, 0x29, 0x24, 0xeb, 0x31, 0x92, 0xf7,
	0xa5, 0x10, 0x2b, 0xec, 0x70, 0xef, 0xa6, 0xc1, 0x8f, 0xa3, 0x3c, 0x6f, 0x2d, 0x7e, 0x01, 0x1b,
	0xf1, 0x38, 0x69, 0x72, 0xdc, 0x55, 0xe4, 0x78, 0x2d, 0x01, 0x71, 0xe8, 0x44, 0x28, 0xf2, 0x77,
	0x0d, 0xea, 0xe1, 0x52, 0x41, 0x51, 0xbe, 0x06, 0x75, 0xc7, 0x72, 0xc7, 0x11, 0xaa, 0x6b, 0x74,
	0x4e, 0x3f, 0x21, 0xd0, 0xe9, 0x50, 0x50, 0xcc, 0xc6, 0x34, 0x98, 0xc7, 0x02, 0xf7, 0x09, 0x7e,
	0x4e, 0x98, 0x0e, 0x1b, 0x26, 0xf0, 0xa5, 0x43, 0xfc, 0x9c, 0x44, 0x34, 0x5a, 0x55, 0x34, 0xfa,
	0x93, 0x06, 0x57, 0xe3, 0x7c, 0x14, 0x93, 0xe9, 0x7d, 0x45, 0xa6, 0x37, 0x57, 0x38, 0xe7, 0x50,
	0xa9, 0xbf, 0xad, 0x89, 0x7e, 0x7a, 0xe8, 0x5b, 0x6e, 0xf0, 0x92, 0x84, 0x1a, 0x25, 0xbe, 0xa2,
	0x12, 0xbf, 0x6c, 0xd4, 0xd5, 0xec, 0x46, 0x1d, 0xc3, 0x7f, 0xde, 0x12, 0xfe, 0x5c, 0x34, 0xea,
	0x65, 0x98, 0xb3, 0x2b, 0x58, 0xfa, 0xe0, 0x0a, 0xfe, 0x43, 0x83, 0x7a, 0xb8, 0x74, 0xb1, 0x0a,
	0xbe, 0x05, 0x57, 0x08, 0x0d, 0xec, 0x58, 0x04, 0x47, 0x45, 0x7c, 0x59, 0xae, 0x66, 0xea, 0x58,
	0x36, 0xf6, 0x25, 0x29, 0x17, 0xd2, 0xd8, 0x23, 0x67, 0x20, 0x54, 0xdc, 0x07, 0x74, 0x60, 0xcd,
	0x71, 0xf8, 0x02, 0x12, 0x12, 0xbe, 0x0b, 0x35, 0x41, 0x5c, 0x06, 0x88, 0x70, 0x4f, 0x68, 0x8a,
	0x36, 0xa1, 0xe2, 0x4d, 0xfb, 0xf6, 0x50, 0x90, 0xab, 0x7b, 0xd3, 0xc7, 0x43, 0x63, 0x1f, 0x36,
	0x95, 0x00, 0x85, 0xf2, 0x34, 0x3e, 0x83, 0x75, 0xea, 0x8d, 0x37, 0x56, 0x01, 0xb6, 0x07, 0x15,
	0x76, 0x8c, 0xc2, 0x4f, 0x7a, 0x23, 0xe6, 0x66, 0xc9, 0x30, 0x3f, 0x84, 0x8d, 0x88, 0xe3, 0x62,
	0x20, 0x9f, 0xf1, 0x94, 0x65, 0xb9, 0x15, 0x38, 0xdf, 0x93, 0x55, 0x8f, 0xc9, 0x89, 0x3b, 0xcc,
	0xac, 0xd3, 0xa2, 0x24, 0xee, 0x53, 0xc5, 0x25, 0xa2, 0xfe, 0x08, 0xb6, 0xd4, 0x48, 0xc5, 0x80,
	0x63, 0x2e, 0x06, 0xa1, 0x92, 0x10, 0xf7, 0x03, 0x00, 0xa6, 0xea, 0x3c, 0xd8, 0x52, 0x5c, 0x0d,
	0x66, 0x9e, 0x8e, 0x5a, 0x48, 0x42, 0x86, 0x29, 0x06, 0xfa, 0xbb, 0xf0, 0xdd, 0x12, 0x83, 0x7d,
	0x91, 0xf5, 0xc0, 0xf8, 0x56, 0xed, 0x05, 0x45, 0xaf, 0xf3, 0xae, 0x72, 0x9d, 0xb3, 0x2b, 0x21,
	0x35, 0xdc, 0xfb, 0xa1, 0x06, 0xaf, 0x1c, 0x08, 0x83, 0x03, 0xec, 0xcf, 0xed, 0x01, 0x46, 0x43,
	0xb8, 0xac, 0xbc, 0xe6, 0xd1, 0xce, 0x8a, 0x3f, 0xd5, 0xda, 0xdd, 0x7c, 0x43, 0x9e, 0x9f, 0x51,
	0x42, 0x5f, 0x42, 0x33, 0xf2, 0x90, 0x43, 0xb7, 0x56, 0x7a, 0xb2, 0xb7, 0x6f, 0xe7, 0x99, 0x49,
	0xff, 0x63, 0xf1, 0x1a, 0x97, 0x1d, 0x18, 0x75, 0x57, 0x7d, 0x8c, 0xb5, 0xdf, 0x5c, 0xc1, 0x52,
	0x06, 0x0a, 0xe9, 0x92, 0x0d, 0x65, 0x67, 0xc5, 0x86, 0x99, 0x4e, 0x57, 0xbc, 0xba, 0x73, 0xba,
	0x22, 0xe5, 0x30, 0x91, 0xae, 0xd3, 0xf5, 0x38, 0x91, 0xae, 0x84, 0xaa, 0x6a, 0x94, 0xd0, 0x53,
	0x68, 0xc8, 0x3a, 0x86, 0x6e, 0xa4, 0x6c, 0x8b, 0x96, 0xcf, 0xf6, 0xcd, 0x6c, 0x23, 0xe9, 0xd9,
	0x82, 0x4b, 0xd1, 0x5a, 0x83, 0xd2, 0x30, 0xc5, 0xca, 0x5e, 0x7b, 0x27, 0xd7, 0x2e, 0x4e, 0x8e,
	0xa0, 0x2d, 0x95, 0x1c, 0xf5, 0xa2, 0xa7, 0x92, 0x13, 0xbb, 0x8b, 0x3c, 0x85, 0xe8, 0xb9, 0xa0,
	0xdb, 0x39, 0x07, 0x97, 0x95, 0x42, 0xd2, 0x75, 0x37, 0x4a, 0x0f, 0x5b, 0x7f, 0x1e, 0x77, 0xb4,
	0x17, 0xc7, 0x1d, 0xed, 0x9f, 0xe3, 0x8e, 0xf6, 0xcb, 0x49, 0xa7, 0xf4, 0xe2, 0xa4, 0x53, 0xfa,
	0xfb, 0xa4, 0x53, 0x3a, 0xaa, 0xb2, 0xbf, 0x72, 0xee, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xfc,
	0x8e, 0xf3, 0xac, 0xe0, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StarlingServiceClient is the client API for StarlingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StarlingServiceClient interface {
	FetchProjects(ctx context.Context, in *FetchProjectsRequest, opts ...grpc.CallOption) (*FetchProjectsResponse, error)
	FetchGroups(ctx context.Context, in *FetchGroupsRequest, opts ...grpc.CallOption) (*FetchGroupsResponse, error)
	FetchOriginLgs(ctx context.Context, in *FetchOriginLgsRequest, opts ...grpc.CallOption) (*FetchOriginLgsResponse, error)
	FetchTransLgs(ctx context.Context, in *FetchTransLgsRequest, opts ...grpc.CallOption) (*FetchTransLgsResponse, error)
	SaveProject(ctx context.Context, in *SaveProjectRequest, opts ...grpc.CallOption) (*SaveProjectResponse, error)
	SaveGroup(ctx context.Context, in *SaveGroupRequest, opts ...grpc.CallOption) (*SaveGroupResponse, error)
	SaveOriginLg(ctx context.Context, in *SaveOriginLgRequest, opts ...grpc.CallOption) (*SaveOriginLgResponse, error)
	SaveTransLg(ctx context.Context, in *SaveTransLgRequest, opts ...grpc.CallOption) (*SaveTransLgResponse, error)
	FetchTransLg(ctx context.Context, in *FetchTransLgRequest, opts ...grpc.CallOption) (*FetchTransLgResponse, error)
}

type starlingServiceClient struct {
	cc *grpc.ClientConn
}

func NewStarlingServiceClient(cc *grpc.ClientConn) StarlingServiceClient {
	return &starlingServiceClient{cc}
}

func (c *starlingServiceClient) FetchProjects(ctx context.Context, in *FetchProjectsRequest, opts ...grpc.CallOption) (*FetchProjectsResponse, error) {
	out := new(FetchProjectsResponse)
	err := c.cc.Invoke(ctx, "/fly.starling.serv.StarlingService/FetchProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starlingServiceClient) FetchGroups(ctx context.Context, in *FetchGroupsRequest, opts ...grpc.CallOption) (*FetchGroupsResponse, error) {
	out := new(FetchGroupsResponse)
	err := c.cc.Invoke(ctx, "/fly.starling.serv.StarlingService/FetchGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starlingServiceClient) FetchOriginLgs(ctx context.Context, in *FetchOriginLgsRequest, opts ...grpc.CallOption) (*FetchOriginLgsResponse, error) {
	out := new(FetchOriginLgsResponse)
	err := c.cc.Invoke(ctx, "/fly.starling.serv.StarlingService/FetchOriginLgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starlingServiceClient) FetchTransLgs(ctx context.Context, in *FetchTransLgsRequest, opts ...grpc.CallOption) (*FetchTransLgsResponse, error) {
	out := new(FetchTransLgsResponse)
	err := c.cc.Invoke(ctx, "/fly.starling.serv.StarlingService/FetchTransLgs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starlingServiceClient) SaveProject(ctx context.Context, in *SaveProjectRequest, opts ...grpc.CallOption) (*SaveProjectResponse, error) {
	out := new(SaveProjectResponse)
	err := c.cc.Invoke(ctx, "/fly.starling.serv.StarlingService/SaveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starlingServiceClient) SaveGroup(ctx context.Context, in *SaveGroupRequest, opts ...grpc.CallOption) (*SaveGroupResponse, error) {
	out := new(SaveGroupResponse)
	err := c.cc.Invoke(ctx, "/fly.starling.serv.StarlingService/SaveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starlingServiceClient) SaveOriginLg(ctx context.Context, in *SaveOriginLgRequest, opts ...grpc.CallOption) (*SaveOriginLgResponse, error) {
	out := new(SaveOriginLgResponse)
	err := c.cc.Invoke(ctx, "/fly.starling.serv.StarlingService/SaveOriginLg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starlingServiceClient) SaveTransLg(ctx context.Context, in *SaveTransLgRequest, opts ...grpc.CallOption) (*SaveTransLgResponse, error) {
	out := new(SaveTransLgResponse)
	err := c.cc.Invoke(ctx, "/fly.starling.serv.StarlingService/SaveTransLg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *starlingServiceClient) FetchTransLg(ctx context.Context, in *FetchTransLgRequest, opts ...grpc.CallOption) (*FetchTransLgResponse, error) {
	out := new(FetchTransLgResponse)
	err := c.cc.Invoke(ctx, "/fly.starling.serv.StarlingService/FetchTransLg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StarlingServiceServer is the server API for StarlingService service.
type StarlingServiceServer interface {
	FetchProjects(context.Context, *FetchProjectsRequest) (*FetchProjectsResponse, error)
	FetchGroups(context.Context, *FetchGroupsRequest) (*FetchGroupsResponse, error)
	FetchOriginLgs(context.Context, *FetchOriginLgsRequest) (*FetchOriginLgsResponse, error)
	FetchTransLgs(context.Context, *FetchTransLgsRequest) (*FetchTransLgsResponse, error)
	SaveProject(context.Context, *SaveProjectRequest) (*SaveProjectResponse, error)
	SaveGroup(context.Context, *SaveGroupRequest) (*SaveGroupResponse, error)
	SaveOriginLg(context.Context, *SaveOriginLgRequest) (*SaveOriginLgResponse, error)
	SaveTransLg(context.Context, *SaveTransLgRequest) (*SaveTransLgResponse, error)
	FetchTransLg(context.Context, *FetchTransLgRequest) (*FetchTransLgResponse, error)
}

// UnimplementedStarlingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStarlingServiceServer struct {
}

func (*UnimplementedStarlingServiceServer) FetchProjects(ctx context.Context, req *FetchProjectsRequest) (*FetchProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProjects not implemented")
}
func (*UnimplementedStarlingServiceServer) FetchGroups(ctx context.Context, req *FetchGroupsRequest) (*FetchGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGroups not implemented")
}
func (*UnimplementedStarlingServiceServer) FetchOriginLgs(ctx context.Context, req *FetchOriginLgsRequest) (*FetchOriginLgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchOriginLgs not implemented")
}
func (*UnimplementedStarlingServiceServer) FetchTransLgs(ctx context.Context, req *FetchTransLgsRequest) (*FetchTransLgsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTransLgs not implemented")
}
func (*UnimplementedStarlingServiceServer) SaveProject(ctx context.Context, req *SaveProjectRequest) (*SaveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProject not implemented")
}
func (*UnimplementedStarlingServiceServer) SaveGroup(ctx context.Context, req *SaveGroupRequest) (*SaveGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGroup not implemented")
}
func (*UnimplementedStarlingServiceServer) SaveOriginLg(ctx context.Context, req *SaveOriginLgRequest) (*SaveOriginLgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOriginLg not implemented")
}
func (*UnimplementedStarlingServiceServer) SaveTransLg(ctx context.Context, req *SaveTransLgRequest) (*SaveTransLgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTransLg not implemented")
}
func (*UnimplementedStarlingServiceServer) FetchTransLg(ctx context.Context, req *FetchTransLgRequest) (*FetchTransLgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchTransLg not implemented")
}

func RegisterStarlingServiceServer(s *grpc.Server, srv StarlingServiceServer) {
	s.RegisterService(&_StarlingService_serviceDesc, srv)
}

func _StarlingService_FetchProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarlingServiceServer).FetchProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly.starling.serv.StarlingService/FetchProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarlingServiceServer).FetchProjects(ctx, req.(*FetchProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarlingService_FetchGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarlingServiceServer).FetchGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly.starling.serv.StarlingService/FetchGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarlingServiceServer).FetchGroups(ctx, req.(*FetchGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarlingService_FetchOriginLgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchOriginLgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarlingServiceServer).FetchOriginLgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly.starling.serv.StarlingService/FetchOriginLgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarlingServiceServer).FetchOriginLgs(ctx, req.(*FetchOriginLgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarlingService_FetchTransLgs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTransLgsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarlingServiceServer).FetchTransLgs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly.starling.serv.StarlingService/FetchTransLgs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarlingServiceServer).FetchTransLgs(ctx, req.(*FetchTransLgsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarlingService_SaveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarlingServiceServer).SaveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly.starling.serv.StarlingService/SaveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarlingServiceServer).SaveProject(ctx, req.(*SaveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarlingService_SaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarlingServiceServer).SaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly.starling.serv.StarlingService/SaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarlingServiceServer).SaveGroup(ctx, req.(*SaveGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarlingService_SaveOriginLg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOriginLgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarlingServiceServer).SaveOriginLg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly.starling.serv.StarlingService/SaveOriginLg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarlingServiceServer).SaveOriginLg(ctx, req.(*SaveOriginLgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarlingService_SaveTransLg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTransLgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarlingServiceServer).SaveTransLg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly.starling.serv.StarlingService/SaveTransLg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarlingServiceServer).SaveTransLg(ctx, req.(*SaveTransLgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StarlingService_FetchTransLg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTransLgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StarlingServiceServer).FetchTransLg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly.starling.serv.StarlingService/FetchTransLg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StarlingServiceServer).FetchTransLg(ctx, req.(*FetchTransLgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StarlingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fly.starling.serv.StarlingService",
	HandlerType: (*StarlingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchProjects",
			Handler:    _StarlingService_FetchProjects_Handler,
		},
		{
			MethodName: "FetchGroups",
			Handler:    _StarlingService_FetchGroups_Handler,
		},
		{
			MethodName: "FetchOriginLgs",
			Handler:    _StarlingService_FetchOriginLgs_Handler,
		},
		{
			MethodName: "FetchTransLgs",
			Handler:    _StarlingService_FetchTransLgs_Handler,
		},
		{
			MethodName: "SaveProject",
			Handler:    _StarlingService_SaveProject_Handler,
		},
		{
			MethodName: "SaveGroup",
			Handler:    _StarlingService_SaveGroup_Handler,
		},
		{
			MethodName: "SaveOriginLg",
			Handler:    _StarlingService_SaveOriginLg_Handler,
		},
		{
			MethodName: "SaveTransLg",
			Handler:    _StarlingService_SaveTransLg_Handler,
		},
		{
			MethodName: "FetchTransLg",
			Handler:    _StarlingService_FetchTransLg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fly_starling.proto",
}

func (m *BaseRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchProjectsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchProjectsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchProjectsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 {
		for k := range m.Filter {
			v := m.Filter[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFlyStarling(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFlyStarling(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFlyStarling(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Offset != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchProjectsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchProjectsRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchProjectsRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyStarling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchProjectsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchProjectsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchProjectsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchGroupsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchGroupsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchGroupsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 {
		for k := range m.Filter {
			v := m.Filter[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFlyStarling(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFlyStarling(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFlyStarling(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchGroupsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchGroupsRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchGroupsRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyStarling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GroupName) > 0 {
		i -= len(m.GroupName)
		copy(dAtA[i:], m.GroupName)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.GroupName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchGroupsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchGroupsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchGroupsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchOriginLgsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchOriginLgsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchOriginLgsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 {
		for k := range m.Filter {
			v := m.Filter[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFlyStarling(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFlyStarling(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFlyStarling(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchOriginLgsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchOriginLgsRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchOriginLgsRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyStarling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OriginLg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OriginLg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OriginLg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.OriginText) > 0 {
		i -= len(m.OriginText)
		copy(dAtA[i:], m.OriginText)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.OriginText)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LangKey) > 0 {
		i -= len(m.LangKey)
		copy(dAtA[i:], m.LangKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.LangKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchOriginLgsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchOriginLgsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchOriginLgsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchTransLgsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchTransLgsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchTransLgsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 {
		for k := range m.Filter {
			v := m.Filter[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintFlyStarling(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFlyStarling(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFlyStarling(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.LangKey) > 0 {
		i -= len(m.LangKey)
		copy(dAtA[i:], m.LangKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.LangKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Offset != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FetchTransLgsRet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchTransLgsRet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchTransLgsRet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFlyStarling(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TransLgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransLgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransLgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFlyStarling(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.TranslateText) > 0 {
		i -= len(m.TranslateText)
		copy(dAtA[i:], m.TranslateText)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.TranslateText)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LangKey) > 0 {
		i -= len(m.LangKey)
		copy(dAtA[i:], m.LangKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.LangKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchTransLgsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchTransLgsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchTransLgsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveProjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveProjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveProjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OpId) > 0 {
		i -= len(m.OpId)
		copy(dAtA[i:], m.OpId)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.OpId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Project != nil {
		{
			size, err := m.Project.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveProjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveProjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveProjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveGroupRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveGroupRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveGroupRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OpId) > 0 {
		i -= len(m.OpId)
		copy(dAtA[i:], m.OpId)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.OpId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Group != nil {
		{
			size, err := m.Group.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveGroupResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveGroupResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveGroupResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveOriginLgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveOriginLgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveOriginLgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OpId) > 0 {
		i -= len(m.OpId)
		copy(dAtA[i:], m.OpId)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.OpId)))
		i--
		dAtA[i] = 0x12
	}
	if m.OriginLang != nil {
		{
			size, err := m.OriginLang.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveOriginLgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveOriginLgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveOriginLgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveTransLgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveTransLgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveTransLgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OpId) > 0 {
		i -= len(m.OpId)
		copy(dAtA[i:], m.OpId)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.OpId)))
		i--
		dAtA[i] = 0x12
	}
	if m.TransLang != nil {
		{
			size, err := m.TransLang.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SaveTransLgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveTransLgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveTransLgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchTransLgRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchTransLgRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchTransLgRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lang) > 0 {
		i -= len(m.Lang)
		copy(dAtA[i:], m.Lang)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.Lang)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.LangKey) > 0 {
		i -= len(m.LangKey)
		copy(dAtA[i:], m.LangKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.LangKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKey) > 0 {
		i -= len(m.GroupKey)
		copy(dAtA[i:], m.GroupKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.GroupKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProjectKey) > 0 {
		i -= len(m.ProjectKey)
		copy(dAtA[i:], m.ProjectKey)
		i = encodeVarintFlyStarling(dAtA, i, uint64(len(m.ProjectKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FetchTransLgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FetchTransLgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FetchTransLgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BaseRet != nil {
		{
			size, err := m.BaseRet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFlyStarling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFlyStarling(dAtA []byte, offset int, v uint64) int {
	offset -= sovFlyStarling(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFlyStarling(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *FetchProjectsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovFlyStarling(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFlyStarling(uint64(m.Offset))
	}
	if len(m.Filter) > 0 {
		for k, v := range m.Filter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFlyStarling(uint64(len(k))) + 1 + len(v) + sovFlyStarling(uint64(len(v)))
			n += mapEntrySize + 1 + sovFlyStarling(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FetchProjectsRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovFlyStarling(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFlyStarling(uint64(l))
		}
	}
	return n
}

func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFlyStarling(uint64(m.Status))
	}
	return n
}

func (m *FetchProjectsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *FetchGroupsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovFlyStarling(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFlyStarling(uint64(m.Offset))
	}
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if len(m.Filter) > 0 {
		for k, v := range m.Filter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFlyStarling(uint64(len(k))) + 1 + len(v) + sovFlyStarling(uint64(len(v)))
			n += mapEntrySize + 1 + sovFlyStarling(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FetchGroupsRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovFlyStarling(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFlyStarling(uint64(l))
		}
	}
	return n
}

func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFlyStarling(uint64(m.Status))
	}
	return n
}

func (m *FetchGroupsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *FetchOriginLgsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovFlyStarling(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFlyStarling(uint64(m.Offset))
	}
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if len(m.Filter) > 0 {
		for k, v := range m.Filter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFlyStarling(uint64(len(k))) + 1 + len(v) + sovFlyStarling(uint64(len(v)))
			n += mapEntrySize + 1 + sovFlyStarling(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FetchOriginLgsRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovFlyStarling(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFlyStarling(uint64(l))
		}
	}
	return n
}

func (m *OriginLg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.LangKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.OriginText)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFlyStarling(uint64(m.Status))
	}
	return n
}

func (m *FetchOriginLgsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *FetchTransLgsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovFlyStarling(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovFlyStarling(uint64(m.Offset))
	}
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.LangKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if len(m.Filter) > 0 {
		for k, v := range m.Filter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovFlyStarling(uint64(len(k))) + 1 + len(v) + sovFlyStarling(uint64(len(v)))
			n += mapEntrySize + 1 + sovFlyStarling(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FetchTransLgsRet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovFlyStarling(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovFlyStarling(uint64(l))
		}
	}
	return n
}

func (m *TransLgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.LangKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.TranslateText)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovFlyStarling(uint64(m.Status))
	}
	return n
}

func (m *FetchTransLgsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *SaveProjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Project != nil {
		l = m.Project.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.OpId)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *SaveProjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *SaveGroupRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Group != nil {
		l = m.Group.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.OpId)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *SaveGroupResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *SaveOriginLgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OriginLang != nil {
		l = m.OriginLang.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.OpId)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *SaveOriginLgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *SaveTransLgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransLang != nil {
		l = m.TransLang.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.OpId)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *SaveTransLgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *FetchTransLgRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProjectKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.GroupKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.LangKey)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	l = len(m.Lang)
	if l > 0 {
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func (m *FetchTransLgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseRet != nil {
		l = m.BaseRet.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFlyStarling(uint64(l))
	}
	return n
}

func sovFlyStarling(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFlyStarling(x uint64) (n int) {
	return sovFlyStarling(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchProjectsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchProjectsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchProjectsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyStarling
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyStarling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFlyStarling
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyStarling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFlyStarling
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlyStarling(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Filter[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchProjectsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchProjectsRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchProjectsRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Project{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchProjectsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchProjectsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchProjectsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FetchProjectsRet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchGroupsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchGroupsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchGroupsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyStarling
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyStarling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFlyStarling
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyStarling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFlyStarling
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlyStarling(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Filter[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchGroupsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchGroupsRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchGroupsRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Group{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchGroupsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchGroupsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchGroupsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FetchGroupsRet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchOriginLgsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchOriginLgsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchOriginLgsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyStarling
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyStarling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFlyStarling
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyStarling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFlyStarling
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlyStarling(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Filter[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchOriginLgsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchOriginLgsRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchOriginLgsRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &OriginLg{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OriginLg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OriginLg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OriginLg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchOriginLgsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchOriginLgsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchOriginLgsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FetchOriginLgsRet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchTransLgsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchTransLgsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchTransLgsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFlyStarling
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyStarling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFlyStarling
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFlyStarling
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthFlyStarling
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFlyStarling(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthFlyStarling
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Filter[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchTransLgsRet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchTransLgsRet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchTransLgsRet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &TransLgs{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransLgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransLgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransLgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TranslateText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TranslateText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchTransLgsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchTransLgsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchTransLgsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FetchTransLgsRet{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveProjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Project == nil {
				m.Project = &Project{}
			}
			if err := m.Project.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveProjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveGroupRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveGroupRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveGroupRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Group == nil {
				m.Group = &Group{}
			}
			if err := m.Group.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveGroupResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveGroupResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveGroupResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveOriginLgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveOriginLgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveOriginLgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginLang", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginLang == nil {
				m.OriginLang = &OriginLg{}
			}
			if err := m.OriginLang.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveOriginLgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveOriginLgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveOriginLgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveTransLgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveTransLgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveTransLgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransLang", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransLang == nil {
				m.TransLang = &TransLgs{}
			}
			if err := m.TransLang.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveTransLgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveTransLgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveTransLgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchTransLgRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchTransLgRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchTransLgRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LangKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LangKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lang", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lang = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FetchTransLgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FetchTransLgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FetchTransLgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseRet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseRet == nil {
				m.BaseRet = &BaseRet{}
			}
			if err := m.BaseRet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFlyStarling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TransLgs{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFlyStarling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFlyStarling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFlyStarling(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFlyStarling
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFlyStarling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFlyStarling
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFlyStarling
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFlyStarling
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFlyStarling        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFlyStarling          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFlyStarling = fmt.Errorf("proto: unexpected end of group")
)
